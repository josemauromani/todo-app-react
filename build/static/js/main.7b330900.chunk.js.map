{"version":3,"sources":["services/TarefaService.tsx","contexts/TarefaContext.tsx","components/Navbar.tsx","components/TarefaAdd.tsx","components/TarefaListaItem.tsx","components/TarefaLista.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["get","data","localStorage","getItem","JSON","parse","TarefaContext","createContext","tarefas","addTarefa","removeTarefa","toggle","TarefaProvider","props","useState","setTarefas","useEffect","length","setItem","stringify","Provider","value","title","tarefa","id","done","index","indexOf","filter","_","i","children","Navbar","className","to","uk-icon","schema","yup","shape","required","TarefaAdd","useContext","useForm","resolver","yupResolver","register","handleSubmit","errors","onSubmit","e","target","reset","window","location","href","type","name","placeholder","ref","message","TarefaListaItem","checked","onChange","onClick","TarefaLista","map","key","App","path","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.7b330900.chunk.js","sourcesContent":["import { Tarefa } from \"../models/Tarefa\";\n\nconst TAREFA_STORE = 'tarefas';\n\nexport const get = (): Tarefa[] => {\n  const data = localStorage.getItem(TAREFA_STORE) || '';\n  try {\n    const result = JSON.parse(data) as Tarefa[];\n    return result;\n  } catch {\n    return [];\n  }\n}\n\nexport const save = (data: Tarefa[]) => {\n  if (data?.length >= 1)\n    localStorage.setItem(TAREFA_STORE, JSON.stringify(data));\n}\n","import React, { createContext, useEffect, useState } from 'react';\nimport { Tarefa } from '../models/Tarefa';\nimport { get, save } from '../services/TarefaService';\nimport { TarefaContextType } from './TarefaContextType';\n\nexport const TarefaContext = createContext<TarefaContextType>({\n  tarefas: [],\n  addTarefa: () => { },\n  removeTarefa: () => { },\n  toggle: () => { },\n});\n\nconst TarefaProvider = (props: any) => {\n\n  const [tarefas, setTarefas] = useState<Tarefa[]>(get);\n\n  useEffect(() => {\n    save(tarefas);\n  }, [tarefas]);\n\n  const addTarefa = (title: any) => {\n    const tarefa: Tarefa = { id: tarefas.length + 1, title: title, done: false }\n    setTarefas([...tarefas, tarefa]);\n  }\n\n  const removeTarefa = (tarefa: Tarefa) => {\n    const index = tarefas.indexOf(tarefa);\n    setTarefas(tarefas.filter((_, i) => i !== index));\n  }\n\n  const toggle = (tarefa: Tarefa) => {\n    const index = tarefas.indexOf(tarefa);\n    tarefas[index].done = !tarefa.done;\n    setTarefas([...tarefas]);\n  }\n\n  return (\n    <TarefaContext.Provider value={{ tarefas, addTarefa, removeTarefa, toggle }}>\n      {props.children}\n    </TarefaContext.Provider>\n  )\n}\n\nexport default TarefaProvider;","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <div className=\"uk-container\">\r\n      <nav className=\"uk-navbar\">\r\n        <div className=\"uk-navbar-left\">\r\n          <Link to=\"/\" className=\"uk-navbar-item uk-logo\">\r\n            Tarefas App\r\n          </Link>\r\n        </div>\r\n        <div className=\"uk-navbar-right\">\r\n          <ul className=\"uk-navbar-nav\">\r\n            <li>\r\n              <Link to=\"/add\">\r\n                <span uk-icon=\"icon: plus; ration: 1.2\"></span>\r\n              </Link>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React, { useContext } from 'react';\nimport { TarefaContext } from '../contexts/TarefaContext';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport { TarefaContextType } from '../contexts/TarefaContextType';\n\nconst schema = yup.object().shape({\n  title: yup.string().required('Tarefa invÃ¡lida'),\n});\n\ninterface TarefaAddForm {\n  title: string\n}\n\nconst TarefaAdd = () => {\n\n  const { addTarefa } = useContext<TarefaContextType>(TarefaContext);\n\n  const { register, handleSubmit, errors } = useForm({\n    resolver: yupResolver(schema),\n  });\n\n  const onSubmit = (data: TarefaAddForm, e: any) => {\n    addTarefa(data.title);\n    e.target.reset();\n    window.location.href = '/';\n  }\n\n  return (\n    <form onSubmit={handleSubmit<TarefaAddForm>(onSubmit)}>\n      <h4>Nova tarefa</h4>\n      <div className=\"uk-margin uk-width-1-1\">\n        <input type=\"text\" name=\"title\" id=\"title\" placeholder=\"Nova tarefa\" className=\"uk-input\" ref={register} />\n        <span><small><strong className=\"uk-text-danger\">{errors.title?.message}</strong></small></span>\n      </div>\n      <div className=\"uk-width-1-1\">\n        <button type=\"submit\" className=\"uk-button uk-button-primary\">Salvar</button>\n      </div>\n    </form>\n  );\n\n}\n\nexport default TarefaAdd;","import React, { useContext } from \"react\";\r\nimport { TarefaContext } from \"../contexts/TarefaContext\";\r\nimport { TarefaContextType } from \"../contexts/TarefaContextType\";\r\nimport { Tarefa } from \"../models/Tarefa\";\r\n\r\ninterface TarefaListaItemProps {\r\n  tarefa: Tarefa;\r\n}\r\n\r\nconst TarefaListaItem = (props: TarefaListaItemProps) => {\r\n\r\n  const { removeTarefa, toggle } = useContext<TarefaContextType>(TarefaContext);\r\n\r\n  const onRemove = (tarefa: Tarefa) => {\r\n    removeTarefa(tarefa);\r\n  }\r\n\r\n  const handleChange = () => {\r\n    toggle(props.tarefa);\r\n  }\r\n\r\n  return (\r\n    <tr className=\"uk-animation-slide-bottom-medium\">\r\n      <td className=\"uk-width-auto\">\r\n        <label>\r\n          <input className=\"uk-checkbox\" type=\"checkbox\" checked={props.tarefa.done} onChange={handleChange} />\r\n        </label>\r\n      </td>\r\n      <td className=\"uk-width-expand\">{props.tarefa.title}</td>\r\n      <td className=\"uk-width-auto\">\r\n        <button className=\"uk-icon-button uk-button-danger\" uk-icon=\"trash\" onClick={() => onRemove(props.tarefa)}></button>\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default TarefaListaItem;\r\n ","import React, { useContext } from \"react\";\r\nimport { TarefaContext } from \"../contexts/TarefaContext\";\r\nimport { TarefaContextType } from \"../contexts/TarefaContextType\";\r\nimport TarefaListaItem from \"./TarefaListaItem\";\r\n\r\nconst TarefaLista = () => {\r\n  const { tarefas } = useContext<TarefaContextType>(TarefaContext);\r\n  return (\r\n    <table className=\"uk-table\">\r\n      <tbody>\r\n        {\r\n          tarefas?.map(\r\n            tarefa => (\r\n              <TarefaListaItem tarefa={tarefa} key={tarefa.id}></TarefaListaItem>\r\n            )\r\n          )\r\n        }\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default TarefaLista;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport TarefaContext from \"../contexts/TarefaContext\";\r\nimport Navbar from \"./Navbar\";\r\nimport TarefaAdd from \"./TarefaAdd\";\r\nimport TarefaLista from \"./TarefaLista\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <TarefaContext>\r\n      <Router>\r\n        <Navbar></Navbar>\r\n        <br />\r\n        <div className=\"uk-container\">\r\n          <Switch>\r\n            <Route path=\"/add\">\r\n              <TarefaAdd></TarefaAdd>\r\n            </Route>\r\n            <Route path=\"/\">\r\n              <h4>Lista de Tarefas</h4>\r\n              <TarefaLista></TarefaLista>\r\n            </Route>\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    </TarefaContext>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}